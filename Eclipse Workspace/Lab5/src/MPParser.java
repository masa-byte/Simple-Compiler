
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 24 12:08:58 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.Scanner;
import SymbolTable.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 24 12:08:58 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\006\005\000\002\002\004\000\002\007" +
    "\006\000\002\003\004\000\002\003\002\000\002\004\006" +
    "\000\002\020\005\000\002\020\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\010\003\000\002\010\004\000\002\011\003\000\002\011" +
    "\006\000\002\011\003\000\002\012\010\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\010\005\001\002\000\004\002\073\001" +
    "\002\000\004\015\006\001\002\000\010\004\ufffd\015\ufffd" +
    "\034\ufffd\001\002\000\004\025\010\001\002\000\004\002" +
    "\001\001\002\000\010\004\012\015\006\034\020\001\002" +
    "\000\016\017\031\034\033\035\035\036\025\037\027\040" +
    "\030\001\002\000\006\021\056\024\055\001\002\000\014" +
    "\004\ufff3\005\ufff3\015\ufff3\016\ufff3\034\ufff3\001\002\000" +
    "\012\004\012\015\006\016\054\034\052\001\002\000\014" +
    "\004\ufff1\005\ufff1\015\ufff1\016\ufff1\034\ufff1\001\002\000" +
    "\010\004\ufffe\015\ufffe\034\ufffe\001\002\000\010\021\ufffa" +
    "\022\022\024\ufffa\001\002\000\012\004\ufff5\015\ufff5\016" +
    "\ufff5\034\ufff5\001\002\000\016\017\031\034\033\035\035" +
    "\036\025\037\027\040\030\001\002\000\022\006\uffe5\007" +
    "\uffe5\020\uffe5\021\uffe5\023\uffe5\027\uffe5\031\uffe5\032\uffe5" +
    "\001\002\000\014\006\uffee\007\047\020\uffee\021\uffee\023" +
    "\uffee\001\002\000\022\006\uffe2\007\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\027\uffe2\031\uffe2\032\uffe2\001\002\000\006\006" +
    "\045\023\051\001\002\000\022\006\uffe1\007\uffe1\020\uffe1" +
    "\021\uffe1\023\uffe1\027\uffe1\031\uffe1\032\uffe1\001\002\000" +
    "\022\006\uffe0\007\uffe0\020\uffe0\021\uffe0\023\uffe0\027\uffe0" +
    "\031\uffe0\032\uffe0\001\002\000\016\017\031\034\033\035" +
    "\035\036\025\037\027\040\030\001\002\000\022\006\uffea" +
    "\007\uffea\020\uffea\021\uffea\023\uffea\027\040\031\041\032" +
    "\037\001\002\000\022\006\uffe6\007\uffe6\020\uffe6\021\uffe6" +
    "\023\uffe6\027\uffe6\031\uffe6\032\uffe6\001\002\000\014\006" +
    "\uffec\007\uffec\020\uffec\021\uffec\023\uffec\001\002\000\022" +
    "\006\uffe3\007\uffe3\020\uffe3\021\uffe3\023\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\001\002\000\016\017\031\034\033\035\035" +
    "\036\025\037\027\040\030\001\002\000\016\017\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\016" +
    "\017\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001" +
    "\002\000\016\017\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\001\002\000\014\006\uffeb\007\uffeb\020\uffeb\021" +
    "\uffeb\023\uffeb\001\002\000\006\006\045\020\044\001\002" +
    "\000\022\006\uffe4\007\uffe4\020\uffe4\021\uffe4\023\uffe4\027" +
    "\uffe4\031\uffe4\032\uffe4\001\002\000\016\017\031\034\033" +
    "\035\035\036\025\037\027\040\030\001\002\000\014\006" +
    "\uffef\007\047\020\uffef\021\uffef\023\uffef\001\002\000\016" +
    "\017\031\034\033\035\035\036\025\037\027\040\030\001" +
    "\002\000\014\006\uffed\007\uffed\020\uffed\021\uffed\023\uffed" +
    "\001\002\000\014\004\ufff2\005\ufff2\015\ufff2\016\ufff2\034" +
    "\ufff2\001\002\000\004\022\022\001\002\000\012\004\ufff4" +
    "\015\ufff4\016\ufff4\034\ufff4\001\002\000\016\004\uffff\005" +
    "\uffff\015\uffff\016\uffff\025\uffff\034\uffff\001\002\000\004" +
    "\034\065\001\002\000\012\011\060\012\063\013\061\014" +
    "\062\001\002\000\004\023\064\001\002\000\004\023\ufff9" +
    "\001\002\000\004\023\ufff7\001\002\000\004\023\ufff6\001" +
    "\002\000\004\023\ufff8\001\002\000\010\004\ufffc\015\ufffc" +
    "\034\ufffc\001\002\000\006\021\ufffb\024\ufffb\001\002\000" +
    "\006\006\045\021\067\001\002\000\010\004\012\015\006" +
    "\034\052\001\002\000\004\005\071\001\002\000\010\004" +
    "\012\015\006\034\052\001\002\000\014\004\ufff0\005\ufff0" +
    "\015\ufff0\016\ufff0\034\ufff0\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\006\003\001\001\000\002\001\001\000" +
    "\004\007\006\001\001\000\004\003\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\016\007\015\010" +
    "\014\011\020\012\013\020\012\001\001\000\014\013\065" +
    "\014\023\015\033\016\031\021\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\015\011\052\012\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\025\014\023\015\033" +
    "\016\031\021\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\042\014\023\015\033\016" +
    "\031\021\022\001\001\000\004\005\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\041\021\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\045\015\033\016\031\021\022" +
    "\001\001\000\002\001\001\000\010\015\047\016\031\021" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\015\011\067\012\013\001\001\000\002\001" +
    "\001\000\010\007\015\011\071\012\013\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();
	relOp = null;

    }



   SymbolTable symbolTable;
   String relOp;
	
   public static void main( String[] args )
   {
      try
	  {
           String filename = "testinput.txt";
           String fullPath = System.getProperty("user.dir") + File.separator + "src" + File.separator + filename;
		   FileReader file = new FileReader( fullPath );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

   public void setRelOp( String op )
   {
	   relOp = op;
   }

   public String getRelOp()
   {
	   String relOp = this.relOp;
	   this.relOp = null;
	   return relOp;
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Const ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("boolean"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Const ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("char"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Const ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("real"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("integer"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Term ::= LEFTPAR _Expression RIGHTPAR 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
		   System.out.println( "Redukcija 32: Term ::= ( Expression )" );
		   RESULT = ex;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Term ::= Const 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 31: Term ::= CONST" );
		   RESULT = new ConstantExpression( c );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= ID 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 30: Term ::= ID" );
		   Variable var = parser.symbolTable.getVar( id );
		   RESULT = new VariableExpression( var );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= GREATER_EQ 
            {
              Object RESULT = null;
		
		   System.out.println( "Redukcija 29: RelOp ::= >=" );
		   parser.setRelOp( "GREATER_EQ" );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= EQ 
            {
              Object RESULT = null;
		
		   System.out.println( "Redukcija 26: RelOp :: ==" );
		   parser.setRelOp( "EQ" );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelOp ::= LESS_EQ 
            {
              Object RESULT = null;
		
		   System.out.println( "Redukcija 25: RelOp ::= <=" );
		   parser.setRelOp( "LESS_EQ" );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= Term 
            {
              Expression RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression t1 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 23: RelExpression ::= Term" );
		   RESULT = t1;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= Term RelOp Term 
            {
              Expression RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Expression t1 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression t2 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 22: RelExpression ::= Term RelOp Term" );
		   switch ( parser.getRelOp() )
		   {
			   case "LESS_EQ": {
				Expression temp1 = new LESS( t1, t2 );
				Expression temp2 = new EQ( t1, t2 );
				RESULT = new OR( temp1, temp2 );
				break;
			   }
			   case "GREATER_EQ": {
				Expression temp1 = new GREATER( t1, t2 );
				Expression temp2 = new EQ( t1, t2 );
				RESULT = new OR( temp1, temp2 );
				break;
			   }
			   case "EQ": RESULT = new EQ( t1, t2 ); break;
		   }
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= RelExpression 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 21: AndExpression ::= RelExpression" );
		   RESULT = ex;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AndExpression ::= AndExpression AND RelExpression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 20: AndExpression ::= AndExpression and RelExpression" );
		   RESULT = new AND( ex1, ex2 );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _Expression ::= AndExpression 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 19: Expression ::= AndExpression" );
		   RESULT = ex;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _Expression ::= _Expression OR AndExpression 
            {
              Expression RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 18: Expression ::= Expression or AndExpression" );
		   RESULT = new OR( ex1, ex2 );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _WhileLoop ::= WHILE _Expression COLON _Statement ELSE _Statement 
            {
              WhileLoop RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 17: WhileLoop ::= while Expression : Statement else Statement" );
		   RESULT = new WhileLoop( ex, s1, s2 );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*_WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _Statement ::= _Block 
            {
              Statement RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 16: Statement ::= Block" );
		   RESULT = b;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*_Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _Statement ::= ID ASSIGN _Expression SEMICOLON 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
		   System.out.println( "Redukcija 15: Statement ::= ID := Expression ;" );
		   Variable var = parser.symbolTable.getVar( id );
		   RESULT = new Assignment( var, ex );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*_Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _Statement ::= _WhileLoop 
            {
              Statement RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		WhileLoop wl = (WhileLoop)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 14: Statement ::= WhileLoop" );
		   RESULT = wl;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*_Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= StatementList _Statement 
            {
              Block RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block sl = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 13: StatementList ::= StatementList Statement" );
		   RESULT = sl;
		   RESULT.addStatement( s );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= _Statement 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 12: StatementList ::= Statement" );
		   RESULT = new Block();
		   RESULT.addStatement( s );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _Type ::= BOOLEAN 
            {
              Type RESULT = null;
		
		   System.out.println( "Redukcija 11: Type ::= boolean" );
		   RESULT = parser.symbolTable.getType("boolean");
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _Type ::= REAL 
            {
              Type RESULT = null;
		
		   System.out.println( "Redukcija 10: Type ::= real" );
		   RESULT = parser.symbolTable.getType("real");
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _Type ::= CHAR 
            {
              Type RESULT = null;
		
		   System.out.println( "Redukcija 9: Type ::= char" );
		   RESULT = parser.symbolTable.getType("char");
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _Type ::= INTEGER 
            {
              Type RESULT = null;
		
		   System.out.println( "Redukcija 8: Type ::= integer" );
		   RESULT = parser.symbolTable.getType("integer");
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 7: NameList ::= ID" );
		   RESULT = new ArrayList();
		   RESULT.add( id );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println( "Redukcija 6: NameList ::= NameList , ID" );
		   RESULT = arr;
		   RESULT.add( id );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= NameList COLON _Type SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
		   System.out.println( "Redukcija 5: Declaration ::= NameList : Type ;" );
		   for (int i = 0; i < arr.size(); i++)
		   {
			   String name = (String) arr.get(i);
			   parser.symbolTable.addVar( name, t );
		   }
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Variables ::= 
            {
              Object RESULT = null;
		
		   System.out.println( "Redukcija 4: Variables ::= epsilon" );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;
		
		   System.out.println( "Redukcija 3: Variables ::= Variables Declaration" );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _Block ::= BEGIN Variables StatementList END 
            {
              Block RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block sl = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
		   System.out.println( "Redukcija 2: Block ::= begin Variables StatementList end" );
		   RESULT = sl;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*_Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM _Block DOT 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
		   System.out.println( "Redukcija 1: Program ::= program Block ." );
		   RESULT = b;
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

