// import sekcija

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.Scanner;

import SymbolTable.*; 

parser code {:

   public int errNo = 0;
   public int warnNo = 0; 

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
        String filename = "testinput.txt";
        String fullPath = System.getProperty("user.dir") + File.separator + "src" + File.separator + filename;
        FileReader file = new FileReader( fullPath );
        Scanner scanner = new MPLexer( file );
        MPParser parser = new MPParser( scanner );
        parser.parse();
		parser.checkWarnings();   
		if ( parser.errNo==0 && parser.warnNo==0 )     
			System.out.println(  "Analiza zavrsena. U kodu nema gresaka." );   
		else      
			System.out.println("Analiza zavrsena. Broj gresaka: " + parser.errNo + " Broj upozorenja: " +   parser.warnNo );
	  }
	  catch( Exception e )
	  {
		e.printStackTrace();
	  }
   }

	public void checkWarnings()
	{
		SymbolNode current = symbolTable.getVariables();
		while ( current != null )
		{
			Variable var = ( Variable ) current;
			if ( var.last_def == -1 && var.last_use == -1 )
			{
				System.out.println("Upozorenje: Promenljiva " + var.name + "je deklarisana, ali se ne koristi.");
				warnNo++;
			}
			else if ( var.last_def > var.last_use )
			{
				System.out.println("Upozorenje: Vrednost dodeljena prom. " + var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
				warnNo++;
			}		
			current = current.next;
		}
	}

    public void syntax_error(Symbol cur_token)
    {
        
    }
   
    public void report_error(String message, Object info)
    {
        System.out.print( message );
    }
    
    public int getLine()
    {
        return (( MPLexer) getScanner()).getLine();
    }
:};

init with {:
	symbolTable = new SymbolTable();
:}

//Terminali
terminal WHILE, ELSE, OR, AND, PROGRAM, INTEGER, CHAR, REAL, BOOLEAN, BEGIN, END;
terminal LEFTPAR, RIGHTPAR, COLON, ASSIGN, SEMICOLON, COMMA, DOT, LESS, LESS_EQ, GREATER, GREATER_EQ, EQ, NOT_EQ;
terminal String ID;
terminal Integer INTCONST;
terminal Double REALCONST;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;

//Neterminali
non terminal Program, Block, Variables, StatementList, Declaration, Statement;
non terminal WhileLoop, RelOp;
non terminal Type _Type, Expression, AndExpression, RelExpression, Term;
non terminal ArrayList NameList;
non terminal Constant Const;


//Precedences added by Eclipse plugin
precedence nonassoc error;	// Inserted by Eclipse plugin


//Gramatika
Program ::= PROGRAM Block DOT
        | PROGRAM Block error
        {:
            System.out.println( "Nedostaje '.' na kraju programa" );
            parser.errNo++;
        :}
        | PROGRAM error
        {:
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Telo programa je nekorektno.");
            parser.errNo++;
        :}
        ;
        
Block ::= BEGIN Variables StatementList END
        | BEGIN Variables StatementList error
        {:
            System.out.println( "Nedostaje 'end' na kraju tela programa" );
            parser.errNo++;
        :}
        | BEGIN Variables error
        {:
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje niz naredbi.");
            parser.errNo++;
        :}
        | BEGIN error
        {:
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje deo za definiciju promenljivih.");
            parser.errNo++;
        :}
        ;
        
Variables ::= Variables Declaration
        |
        ;
        
Declaration ::= NameList:arr COLON _Type:t SEMICOLON
        {:
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }
        :}
        | NameList:arr COLON _Type:t error
        {:
			for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ';' na kraju.");
            parser.errNo++;
        :}
        | NameList:arr COLON error
        {:
            Type t;
            t = parser.symbolTable.getType("unknown");
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje tip promenljivih.");
            parser.errNo++;
        :}
        | NameList:arr error
        {:
            Type t;
            t = parser.symbolTable.getType("unknown");
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':' izmedju imena i tipa promenljivih.");
            parser.errNo++;
        :}
        ;
        
NameList ::= NameList:arr COMMA ID:id
        {:
            RESULT = arr;
            RESULT.add( id );
        :}
        | NameList:arr COMMA error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ime promenljive.");
            parser.errNo++;
            RESULT = arr;
        :}
        | ID:id
        {:
            RESULT = new ArrayList();
            RESULT.add( id );
        :}
        ;
        
_Type ::= INTEGER
        {:
            RESULT = parser.symbolTable.getType("integer");
        :}
        | CHAR
        {:
            RESULT = parser.symbolTable.getType("char");
        :}
        | REAL
        {:
            RESULT = parser.symbolTable.getType("real");
        :}
        | BOOLEAN
        {:
            RESULT = parser.symbolTable.getType("boolean");
        :}
        ;
        
StatementList ::= Statement
        | StatementList Statement 
        ;
        
Statement ::= WhileLoop
        | ID:id ASSIGN Expression:ex SEMICOLON
        {:
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            { 
                var.last_def = parser.getLine();
                if (var.type.tkind != ex.tkind)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Tipovi promenljive i izraza se ne poklapaju." );
                    parser.errNo++;
                }
            }
        :}
        | ID:id ASSIGN Expression:ex error
        {:
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            {
                var.last_def = parser.getLine();
                if (var.type.tkind != ex.tkind)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Tipovi promenljive i izraza se ne poklapaju." );
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ';' na kraju.");
            parser.errNo++;
        :}
        | ID:id ASSIGN error
        {:
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
                var.last_def = parser.getLine();

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;
        :}
        | ID:id error
        {:
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
                var.last_def = parser.getLine();

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':=' izmedju imena promenljive i izraza.");
            parser.errNo++;
        :}
        | Block
        ;
        
WhileLoop ::= WHILE Expression:ex COLON Statement ELSE Statement
        {:
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }
        :}
        | WHILE Expression:ex COLON Statement ELSE error
        {:
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje naredba.");
            parser.errNo++;
        :}
        | WHILE Expression:ex COLON Statement error
        {:
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje 'else' deo.");
            parser.errNo++;
        :}
        | WHILE Expression:ex COLON error
        {:
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje naredba.");
            parser.errNo++;
        :}
        | WHILE Expression:ex error
        {:
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':' izmedju uslova i tela petlje.");
            parser.errNo++;
        :}
        | WHILE error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje uslov petlje.");
            parser.errNo++;
        :}
        ;
        
Expression ::= Expression:t1 OR AndExpression:t2
        {:
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }
            else if ( t2.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije tipa boolean." );
            }
            RESULT = parser.symbolTable.getType("boolean");
        :}
        | Expression:t1 OR error
        {:
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        :}
        | AndExpression:t1
        {:
            RESULT = t1;
        :}
        ;
        
AndExpression ::= AndExpression:t1 AND RelExpression:t2
        {:
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }
            else if ( t2.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije tipa boolean." );
            }
            RESULT = parser.symbolTable.getType("boolean");
        :}
        | AndExpression:t1 AND error
        {:
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje relacioni izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        :}
        | AndExpression:t1 error
        {:
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje 'and' izmedju izraza.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        :}
        | RelExpression:t1
        {:
            RESULT = t1;
        :}
        ;
        
RelExpression ::= Term:t1 RelOp Term:t2
        {:
            if ( t1.tkind != Type.INTEGER && t1.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }
            else if ( t2.tkind != Type.INTEGER && t2.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije aritmetickog tipa." );
            }
            RESULT = parser.symbolTable.getType("boolean");
        :}
        | Term:t1 RelOp error
        {:
            if ( t1.tkind != Type.INTEGER && t1.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        :}
        | Term:t1 error
        {:
            if ( t1.type.tkind != Type.INTEGER && t1.type.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje relacioni operator.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        :}
        | Term:t1
        {:
            RESULT = t1;
        :}
        ;
        
RelOp ::= LESS
        | LESS_EQ
        | EQ
        | NOT_EQ
        | GREATER
        | GREATER_EQ
        ;
        
Term ::= ID:id
        {:
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            {
                RESULT = var.type;
                if (var.last_def == -1)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Promenljiva " + id + " nije inicijalizovana." );
                    parser.errNo++;
                }
                var.last_use = parser.getLine();
            }
        :}
        | Const:c
        {:
            RESULT = c.type;
        :}
        | LEFTPAR Expression:ex RIGHTPAR
        {:
            RESULT = ex;
        :}
        | LEFTPAR Expression:ex error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje desna zagrada na kraju.");
            parser.errNo++;

            RESULT = ex;
        :}
        | LEFTPAR error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("unknown");
        :}
        ;

Const ::= INTCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType("integer"), c );
        :}
        | REALCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType("real"), c );
        :}
        | CHARCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType("char"), c );
        :}
        | BOOLCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType("boolean"), c );
        :}
        ;