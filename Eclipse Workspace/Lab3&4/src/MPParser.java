
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 24 10:55:58 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.Scanner;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 24 10:55:58 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\003\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\004\000\002\005\004\000" +
    "\002\005\002\000\002\007\006\000\002\007\006\000\002" +
    "\007\005\000\002\007\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\006\003\000" +
    "\002\006\004\000\002\010\003\000\002\010\006\000\002" +
    "\010\006\000\002\010\005\000\002\010\004\000\002\010" +
    "\003\000\002\011\010\000\002\011\010\000\002\011\007" +
    "\000\002\011\006\000\002\011\005\000\002\011\004\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\010\005\001\002\000\004\002\126\001" +
    "\002\000\006\003\006\015\010\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\124\025\125\001\002\000\012\003" +
    "\011\004\ufff8\015\ufff8\034\ufff8\001\002\000\020\003\ufffa" +
    "\004\ufffa\005\ufffa\015\ufffa\016\ufffa\025\ufffa\034\ufffa\001" +
    "\002\000\012\003\023\004\013\015\010\034\022\001\002" +
    "\000\020\003\113\017\034\034\036\035\041\036\030\037" +
    "\032\040\033\001\002\000\010\003\076\021\077\024\075" +
    "\001\002\000\016\003\uffe5\004\uffe5\005\uffe5\015\uffe5\016" +
    "\uffe5\034\uffe5\001\002\000\014\003\072\004\013\015\010" +
    "\016\074\034\071\001\002\000\016\003\uffea\004\uffea\005" +
    "\uffea\015\uffea\016\uffea\034\uffea\001\002\000\012\003\ufff9" +
    "\004\ufff9\015\ufff9\034\ufff9\001\002\000\014\003\uffec\004" +
    "\uffec\015\uffec\016\uffec\034\uffec\001\002\000\012\003\024" +
    "\021\ufff1\022\025\024\ufff1\001\002\000\020\003\ufffb\004" +
    "\ufffb\005\ufffb\015\ufffb\016\ufffb\025\ufffb\034\ufffb\001\002" +
    "\000\016\003\uffe6\004\uffe6\005\uffe6\015\uffe6\016\uffe6\034" +
    "\uffe6\001\002\000\020\003\037\017\034\034\036\035\041" +
    "\036\030\037\032\040\033\001\002\000\032\003\uffcc\006" +
    "\uffcc\007\uffcc\020\uffcc\021\uffcc\023\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\001\002\000\016\003" +
    "\063\006\uffdc\007\064\020\uffdc\021\uffdc\023\uffdc\001\002" +
    "\000\032\003\uffc7\006\uffc7\007\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\001\002\000\010\003\070\006\060\023\067\001\002\000" +
    "\032\003\uffc6\006\uffc6\007\uffc6\020\uffc6\021\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\001" +
    "\002\000\032\003\uffc5\006\uffc5\007\uffc5\020\uffc5\021\uffc5" +
    "\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\001\002\000\020\003\055\017\034\034\036\035\041" +
    "\036\030\037\032\040\033\001\002\000\032\003\044\006" +
    "\uffd4\007\uffd4\020\uffd4\021\uffd4\023\uffd4\026\047\027\046" +
    "\030\045\031\051\032\043\033\050\001\002\000\032\003" +
    "\uffcd\006\uffcd\007\uffcd\020\uffcd\021\uffcd\023\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\001\002\000" +
    "\016\003\uffe7\004\uffe7\005\uffe7\015\uffe7\016\uffe7\034\uffe7" +
    "\001\002\000\016\003\uffd8\006\uffd8\007\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\001\002\000\032\003\uffc8\006\uffc8\007\uffc8" +
    "\020\uffc8\021\uffc8\023\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\001\002\000\020\003\053\017\034" +
    "\034\036\035\041\036\030\037\032\040\033\001\002\000" +
    "\020\003\uffd1\017\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\001\002\000\016\003\uffd5\006\uffd5\007\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\001\002\000\020\003\uffcf\017\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002\000" +
    "\020\003\uffd2\017\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\001\002\000\020\003\uffd3\017\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002\000\020\003\uffd0" +
    "\017\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001" +
    "\002\000\020\003\uffce\017\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\001\002\000\016\003\uffd7\006\uffd7\007" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\001\002\000\016\003\uffd6" +
    "\006\uffd6\007\uffd6\020\uffd6\021\uffd6\023\uffd6\001\002\000" +
    "\010\003\057\006\060\020\056\001\002\000\032\003\uffc9" +
    "\006\uffc9\007\uffc9\020\uffc9\021\uffc9\023\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\001\002\000\032" +
    "\003\uffcb\006\uffcb\007\uffcb\020\uffcb\021\uffcb\023\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\001\002" +
    "\000\032\003\uffca\006\uffca\007\uffca\020\uffca\021\uffca\023" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\001\002\000\020\003\062\017\034\034\036\035\041\036" +
    "\030\037\032\040\033\001\002\000\016\003\063\006\uffde" +
    "\007\064\020\uffde\021\uffde\023\uffde\001\002\000\014\003" +
    "\uffdd\006\uffdd\020\uffdd\021\uffdd\023\uffdd\001\002\000\016" +
    "\003\uffd9\006\uffd9\007\uffd9\020\uffd9\021\uffd9\023\uffd9\001" +
    "\002\000\020\003\065\017\034\034\036\035\041\036\030" +
    "\037\032\040\033\001\002\000\016\003\uffda\006\uffda\007" +
    "\uffda\020\uffda\021\uffda\023\uffda\001\002\000\016\003\uffdb" +
    "\006\uffdb\007\uffdb\020\uffdb\021\uffdb\023\uffdb\001\002\000" +
    "\016\003\uffe9\004\uffe9\005\uffe9\015\uffe9\016\uffe9\034\uffe9" +
    "\001\002\000\016\003\uffe8\004\uffe8\005\uffe8\015\uffe8\016" +
    "\uffe8\034\uffe8\001\002\000\006\003\024\022\025\001\002" +
    "\000\020\003\ufffc\004\ufffc\005\ufffc\015\ufffc\016\ufffc\025" +
    "\ufffc\034\ufffc\001\002\000\014\003\uffeb\004\uffeb\015\uffeb" +
    "\016\uffeb\034\uffeb\001\002\000\020\003\ufffd\004\ufffd\005" +
    "\ufffd\015\ufffd\016\ufffd\025\ufffd\034\ufffd\001\002\000\006" +
    "\003\111\034\110\001\002\000\012\003\ufff4\004\ufff4\015" +
    "\ufff4\034\ufff4\001\002\000\014\003\102\011\100\012\105" +
    "\013\103\014\104\001\002\000\006\003\ufff0\023\ufff0\001" +
    "\002\000\006\003\107\023\106\001\002\000\012\003\ufff5" +
    "\004\ufff5\015\ufff5\034\ufff5\001\002\000\006\003\uffee\023" +
    "\uffee\001\002\000\006\003\uffed\023\uffed\001\002\000\006" +
    "\003\uffef\023\uffef\001\002\000\012\003\ufff7\004\ufff7\015" +
    "\ufff7\034\ufff7\001\002\000\012\003\ufff6\004\ufff6\015\ufff6" +
    "\034\ufff6\001\002\000\010\003\ufff3\021\ufff3\024\ufff3\001" +
    "\002\000\010\003\ufff2\021\ufff2\024\ufff2\001\002\000\010" +
    "\003\114\006\060\021\115\001\002\000\016\003\uffdf\004" +
    "\uffdf\005\uffdf\015\uffdf\016\uffdf\034\uffdf\001\002\000\016" +
    "\003\uffe0\004\uffe0\005\uffe0\015\uffe0\016\uffe0\034\uffe0\001" +
    "\002\000\012\003\116\004\013\015\010\034\071\001\002" +
    "\000\016\003\uffe1\004\uffe1\005\uffe1\015\uffe1\016\uffe1\034" +
    "\uffe1\001\002\000\006\003\120\005\121\001\002\000\016" +
    "\003\uffe2\004\uffe2\005\uffe2\015\uffe2\016\uffe2\034\uffe2\001" +
    "\002\000\012\003\122\004\013\015\010\034\071\001\002" +
    "\000\016\003\uffe3\004\uffe3\005\uffe3\015\uffe3\016\uffe3\034" +
    "\uffe3\001\002\000\016\003\uffe4\004\uffe4\005\uffe4\015\uffe4" +
    "\016\uffe4\034\uffe4\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\011\001\001\000\002\001\001\000\016\004" +
    "\014\006\015\007\017\010\020\011\016\020\013\001\001" +
    "\000\014\014\111\015\026\016\037\017\034\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\014" +
    "\010\072\011\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\030\015\026\016\037\017" +
    "\034\021\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\053\015\026\016\037\017\034" +
    "\021\025\001\001\000\004\012\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\051\021\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\060\016" +
    "\037\017\034\021\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\065\017\034\021" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\014\010\116\011\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\014\010\122\011" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0; 

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
        String filename = "testinput.txt";
        String fullPath = System.getProperty("user.dir") + File.separator + "src" + File.separator + filename;
        FileReader file = new FileReader( fullPath );
        Scanner scanner = new MPLexer( file );
        MPParser parser = new MPParser( scanner );
        parser.parse();
		parser.checkWarnings();   
		if ( parser.errNo==0 && parser.warnNo==0 )     
			System.out.println(  "Analiza zavrsena. U kodu nema gresaka." );   
		else      
			System.out.println("Analiza zavrsena. Broj gresaka: " + parser.errNo + " Broj upozorenja: " +   parser.warnNo );
	  }
	  catch( Exception e )
	  {
		e.printStackTrace();
	  }
   }

	public void checkWarnings()
	{
		SymbolNode current = symbolTable.getVariables();
		while ( current != null )
		{
			Variable var = ( Variable ) current;
			if ( var.last_def == -1 && var.last_use == -1 )
			{
				System.out.println("Upozorenje: Promenljiva " + var.name + "je deklarisana, ali se ne koristi.");
				warnNo++;
			}
			else if ( var.last_def > var.last_use )
			{
				System.out.println("Upozorenje: Vrednost dodeljena prom. " + var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
				warnNo++;
			}		
			current = current.next;
		}
	}

    public void syntax_error(Symbol cur_token)
    {
        
    }
   
    public void report_error(String message, Object info)
    {
        System.out.print( message );
    }
    
    public int getLine()
    {
        return (( MPLexer) getScanner()).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Const ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("boolean"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Const ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("char"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Const ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("real"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("integer"), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Term ::= LEFTPAR error 
            {
              Type RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("unknown");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= LEFTPAR Expression error 
            {
              Type RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje desna zagrada na kraju.");
            parser.errNo++;

            RESULT = ex;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Type RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            RESULT = ex;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Const 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = c.type;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= ID 
            {
              Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            {
                RESULT = var.type;
                if (var.last_def == -1)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Promenljiva " + id + " nije inicijalizovana." );
                    parser.errNo++;
                }
                var.last_use = parser.getLine();
            }
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= GREATER_EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= NOT_EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= LESS_EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= LESS 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= Term 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = t1;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= Term error 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            if ( t1.type.tkind != Type.INTEGER && t1.type.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje relacioni operator.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelExpression ::= Term RelOp error 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            if ( t1.tkind != Type.INTEGER && t1.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelExpression ::= Term RelOp Term 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            if ( t1.tkind != Type.INTEGER && t1.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije aritmetickog tipa." );
            }
            else if ( t2.tkind != Type.INTEGER && t2.tkind != Type.REAL )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije aritmetickog tipa." );
            }
			System.out.println(r);
            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AndExpression ::= RelExpression 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = t1;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= AndExpression error 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje 'and' izmedju izraza.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AndExpression ::= AndExpression AND error 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje relacioni izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AndExpression ::= AndExpression AND RelExpression 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }
            else if ( t2.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije tipa boolean." );
            }
            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= AndExpression 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = t1;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression OR error 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;

            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression OR AndExpression 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            if ( t1.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Levi operand nije tipa boolean." );
            }
            else if ( t2.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Desni operand nije tipa boolean." );
            }
            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WhileLoop ::= WHILE error 
            {
              Object RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje uslov petlje.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WhileLoop ::= WHILE Expression error 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':' izmedju uslova i tela petlje.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WhileLoop ::= WHILE Expression COLON error 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje naredba.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WhileLoop ::= WHILE Expression COLON Statement error 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje 'else' deo.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WhileLoop ::= WHILE Expression COLON Statement ELSE error 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje naredba.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WhileLoop ::= WHILE Expression COLON Statement ELSE Statement 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
            if ( ex.tkind != Type.BOOLEAN )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Uslov petlje mora biti tipa boolean." );
                parser.errNo++;
            }
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= ID error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
                var.last_def = parser.getLine();

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':=' izmedju imena promenljive i izraza.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
                var.last_def = parser.getLine();

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje izraz.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            {
                var.last_def = parser.getLine();
                if (var.type.tkind != ex.tkind)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Tipovi promenljive i izraza se ne poklapaju." );
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ';' na kraju.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type ex = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                    "Promenljiva " + id + " nije deklarisana." );
                parser.errNo++;
            }
            else
            { 
                var.last_def = parser.getLine();
                if (var.type.tkind != ex.tkind)
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                        "Tipovi promenljive i izraza se ne poklapaju." );
                    parser.errNo++;
                }
            }
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= WhileLoop 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _Type ::= BOOLEAN 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType("boolean");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _Type ::= REAL 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType("real");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _Type ::= CHAR 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType("char");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _Type ::= INTEGER 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType("integer");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*_Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.add( id );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ime promenljive.");
            parser.errNo++;
            RESULT = arr;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            RESULT = arr;
            RESULT.add( id );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= NameList error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            Type t;
            t = parser.symbolTable.getType("unknown");
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ':' izmedju imena i tipa promenljivih.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= NameList COLON error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            Type t;
            t = parser.symbolTable.getType("unknown");
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje tip promenljivih.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= NameList COLON _Type error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
			for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }

            System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje ';' na kraju.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= NameList COLON _Type SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            for ( int i = 0; i < arr.size(); i++ )
            {
                String name = (String) arr.get( i );
                if (! parser.symbolTable.addVar(name, t))
                {
                    System.out.println("Greska u liniji " + parser.getLine() + ": " + "\nPromenljiva " + name + " je vec deklarisana.");
                    parser.errNo++;
                }
            }
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variables ::= 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= BEGIN error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje deo za definiciju promenljivih.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN Variables error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Nedostaje niz naredbi.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN Variables StatementList error 
            {
              Object RESULT = null;
		
            System.out.println( "Nedostaje 'end' na kraju tela programa" );
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= BEGIN Variables StatementList END 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + 
                "Telo programa je nekorektno.");
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM Block error 
            {
              Object RESULT = null;
		
            System.out.println( "Nedostaje '.' na kraju programa" );
            parser.errNo++;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM Block DOT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

